<?php
namespace Ronanchilvers\Db\Console\Command;

use Aura\SqlSchema\SchemaInterface;
use DateTime;
use Nette\PhpGenerator\PhpNamespace;
use PDO;
use Ronanchilvers\Db\Console\Command;
use Ronanchilvers\Db\Model;
use Ronanchilvers\Db\Model\Generator;
use Ronanchilvers\Db\Schema\SchemaFactory;
use Ronanchilvers\Utility\Str;
use RuntimeException;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Command to generate the php code for models
 *
 * @author Ronan Chilvers
 */
class GenerateCommand extends Command
{
    protected function configure()
    {
        $this->setName('generate')
            ->setDescription('Generate model classes')
            ->addOption(
                'output_dir',
                'o',
                InputOption::VALUE_REQUIRED,
                'The directory in which to store the generate code',
                null
            )
            ->addOption(
                'namespace',
                null,
                InputOption::VALUE_REQUIRED,
                'The namespace to use for the generated classes',
                null
            )
            ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $outputDir = $this->optionOrConfig($input, 'output_dir', null);
        if (!is_dir($outputDir)) {
            throw new RuntimeException(
                sprintf('Output directory %s does not exist', $outputDir)
            );
        }
        $outputDir = realpath($outputDir);

        $pdo = $this->config('pdo');
        if (!$pdo instanceof PDO) {
            throw new RuntimeException('Unable to locate valid PDO instance');
        }
        $schema = (new SchemaFactory)->factory($pdo);

        $tables = $schema->fetchTableList();
        $output->writeln(sprintf('generating models for %d tables', count($tables)));

        // Generate models for classes extending Model
        $now = (new DateTime())->format('Y-m-d H:i:s');
        foreach ($tables as $table) {
            $output->write('table : ' . $table);
            $dbColumns = $schema->fetchTableCols($table);

            // Generate a model name - the singular of the table name
            $modelName = Str::pascal(Str::singular($table));

            // Create the namespace
            $namespace = new PhpNamespace(
                $this->optionOrConfig($input, 'namespace', 'App')
            );

            // Create the base class definition
            $class = $namespace->addClass($modelName);
            $class
                ->setExtends(Model::class)
                ->addComment('Auto-generated by ronanchilvers/db')
                ->addComment('Table : ' . $table)
                // ->addComment('Generated : ' . $now)
                ;

            // Create accessors
            $primaryKey = null;
            $columns = $data = [];
            foreach ($dbColumns as $column) {
                if ($column->primary) {
                    $primaryKey = $column->name;
                }
                $columns[$column->name] = [
                    'required' => $column->notnull,
                ];
                $data[$column->name] = null;
            }

            $class
                ->addProperty('table', $table)
                ->setVisibility('public')
                ->setStatic()
                ->addComment('The table name for this model')
                ->addComment('@var string')
                ;
            $class
                ->addProperty('primaryKey', $primaryKey)
                ->setVisibility('public')
                ->setStatic()
                ->addComment('The primary key for this model')
                ->addComment('@var string')
                ;
            $class
                ->addProperty('columns', $columns)
                ->setVisibility('protected')
                ->addComment('The columns available for this model')
                ->addComment('@var array')
                ;
            $class
                ->addProperty('data', $data)
                ->setVisibility('protected')
                ->addComment('The data array for this model')
                ->addComment('@var array')
                ;

            $classString = "<?php\n\n{$namespace}";
            $classString = str_replace("\n\n}", '}', $classString);
            $result = file_put_contents(
                $outputDir . '/' . $modelName . '.php',
                $classString
            );
            if (!$result) {
                throw new RuntimeException(
                    sprintf('Unable to write class file for table %s', $table)
                );
            }
            $output->writeln(' - done');
        }
    }
}
